Require Import UniMath.Algebra.Monoids.
Require Import UniMath.Algebra.RigsAndRings.
Require Import UniMath.MoreFoundations.All.
Require Import UniMath.Foundations.Preamble.
Require Import UniMath.Algebra.RigsAndRings.Ideals.

(* Coercing ideals *)
Definition lideal_to_subabmonoid {X : rig} : lideal X → subabmonoid (rigaddabmonoid X) := pr1.
Coercion lideal_to_subabmonoid : lideal >-> subabmonoid.

Definition the_intersection_submonoid
           {X : monoid} {I : UU} (S : I -> submonoid X) : submonoid X
  := (subtype_intersection S,, intersection_submonoid S (λ x, pr2 (S x))).

(* Monoid generated by a subset *)
Definition monoid_gen (X : monoid) (S : hsubtype X) : submonoid X :=
  the_intersection_submonoid (λ (B : ∑ (C : submonoid X), ∏ (x : X), C x), pr1 B).

(* Localization at a subset *)
Definition abmonoid_loc (X : abmonoid) (S : hsubtype X) : abmonoid :=
  abmonoidfrac X (monoid_gen X S).

Open Scope ring.

Lemma intersection_lideal
      {R : rig} {I : UU} (S : I -> lideal R):
  is_lideal (the_intersection_submonoid S).
Proof.
  intros r s.
  intro p.
  intro x.
  apply (pr2 (S x) r s (p x)).
Qed.

Definition the_intersection_lideal
      {R : rig} {I : UU} (S : I -> lideal R): lideal R
  := (the_intersection_submonoid S,, intersection_lideal S).

Definition ideal_gen {X : rig} (S : hsubtype X) : lideal X :=
  the_intersection_lideal (λ (B : ∑ (C : lideal X), ∏ (x : X), pr1 C x), pr1 B).

Open Scope rig_scope.

Definition lideal_is_everything {X : rig} (l : lideal X) : UU := ∏ x : X, l x.
Definition lideal_has_one {X : rig} (l : lideal X) : UU := l 1.

Definition zariski_cover (X : rig) := ∑ I : UU, ∑ S : I → hsubtype X, lideal_has_one (ideal_gen (subtype_union S)).

Definition generated_twobinopeqrel_hrel {X : setwith2binop} (R : hrel X) : hrel X :=
  λ x x', ∀ (R' : twobinopeqrel X), himpl (∏ y z, R y z → R' y z) (R' x x').

Lemma istwobinophrel_generated_binopeqrel {X : setwith2binop} (R : hrel X) :
  is2binophrel (generated_twobinopeqrel_hrel R).
Proof.
  apply dirprodpair.
  - apply dirprodpair.
    + intros a b c genRab R' RimpR'.
      apply (pr1 (pr1 (pr2 R'))).
      exact (genRab R' RimpR').
    + intros a b c genRab R' RimpR'.
      apply (pr2 (pr1 (pr2 R'))).
      exact (genRab R' RimpR').
  - apply dirprodpair.
    + intros a b c genRab R' RimpR'.
      apply (pr1 (pr2 (pr2 R'))).
      exact (genRab R' RimpR').
    + intros a b c genRab R' RimpR'.
      apply (pr2 (pr2 (pr2 R'))).
      exact (genRab R' RimpR').
Defined.

(* TODO: The two lemmas below need to be modified and proven *)

Lemma iseqrel_generated_binopeqrel {X : setwithbinop} (R : hrel X) :
  iseqrel (generated_binopeqrel_hrel R).
Proof.
  use iseqrelconstr.
  - intros x1 x2 x3 H1 H2 R' HR. eapply eqreltrans.
    + exact (H1 R' HR).
    + exact (H2 R' HR).
  - intros x R' HR. apply eqrelrefl.
  - intros x1 x2 H R' HR. apply eqrelsymm. exact (H R' HR).
Defined.

Definition generated_twobinopeqrel {X : setwithbinop} (R : hrel X) : binopeqrel X :=
  binopeqrelpair (eqrelpair (generated_binopeqrel_hrel R) (iseqrel_generated_binopeqrel R))
                 (isbinophrel_generated_binopeqrel R).
